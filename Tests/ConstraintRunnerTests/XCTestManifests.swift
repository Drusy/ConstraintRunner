#if !canImport(ObjectiveC)
import XCTest

extension ConstraintRunnerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConstraintRunnerTests = [
        ("testRunner_connectivity_any_alwaystrue", testRunner_connectivity_any_alwaystrue),
        ("testRunner_connectivity_cellular_ko", testRunner_connectivity_cellular_ko),
        ("testRunner_connectivity_cellular_ok", testRunner_connectivity_cellular_ok),
        ("testRunner_connectivity_default_alwaystrue", testRunner_connectivity_default_alwaystrue),
        ("testRunner_connectivity_notreachable_ko", testRunner_connectivity_notreachable_ko),
        ("testRunner_connectivity_notreachable_ok", testRunner_connectivity_notreachable_ok),
        ("testRunner_connectivity_reachable_ko", testRunner_connectivity_reachable_ko),
        ("testRunner_connectivity_reachable_ok", testRunner_connectivity_reachable_ok),
        ("testRunner_connectivity_wifi_ko", testRunner_connectivity_wifi_ko),
        ("testRunner_connectivity_wifi_ok", testRunner_connectivity_wifi_ok),
        ("testRunner_didLastExecutionFail_fail", testRunner_didLastExecutionFail_fail),
        ("testRunner_didLastExecutionFail_success", testRunner_didLastExecutionFail_success),
        ("testRunner_maxRetryInterval_default_failed_true", testRunner_maxRetryInterval_default_failed_true),
        ("testRunner_maxRetryInterval_default_succeded_true", testRunner_maxRetryInterval_default_succeded_true),
        ("testRunner_maxRetryInterval_failed_timeIntervalBeforeNextExecution", testRunner_maxRetryInterval_failed_timeIntervalBeforeNextExecution),
        ("testRunner_maxRetryInterval_invalid", testRunner_maxRetryInterval_invalid),
        ("testRunner_maxRetryInterval_success_timeIntervalBeforeNextExecution", testRunner_maxRetryInterval_success_timeIntervalBeforeNextExecution),
        ("testRunner_maxRetryInterval_valid", testRunner_maxRetryInterval_valid),
        ("testRunner_period_any_alwaystrue", testRunner_period_any_alwaystrue),
        ("testRunner_period_default_alwaystrue", testRunner_period_default_alwaystrue),
        ("testRunner_period_failed_timeIntervalBeforeNextExecution", testRunner_period_failed_timeIntervalBeforeNextExecution),
        ("testRunner_period_onceaday_ko", testRunner_period_onceaday_ko),
        ("testRunner_period_onceaday_ok", testRunner_period_onceaday_ok),
        ("testRunner_period_onceaweek_ko", testRunner_period_onceaweek_ko),
        ("testRunner_period_onceaweek_ok", testRunner_period_onceaweek_ok),
        ("testRunner_period_onceeverydaycount_ko", testRunner_period_onceeverydaycount_ko),
        ("testRunner_period_onceeverydaycount_ok", testRunner_period_onceeverydaycount_ok),
        ("testRunner_period_onceeveryhourcount_ko", testRunner_period_onceeveryhourcount_ko),
        ("testRunner_period_onceeveryhourcount_ok", testRunner_period_onceeveryhourcount_ok),
        ("testRunner_period_onceeveryminutecount_ko", testRunner_period_onceeveryminutecount_ko),
        ("testRunner_period_onceeveryminutecount_ok", testRunner_period_onceeveryminutecount_ok),
        ("testRunner_period_onceeverysecondcount_ko", testRunner_period_onceeverysecondcount_ko),
        ("testRunner_period_onceeverysecondcount_ok", testRunner_period_onceeverysecondcount_ok),
        ("testRunner_period_success_timeIntervalBeforeNextExecution", testRunner_period_success_timeIntervalBeforeNextExecution),
        ("testRunner_period_twiceaday_ko", testRunner_period_twiceaday_ko),
        ("testRunner_period_twiceaday_ok", testRunner_period_twiceaday_ok),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ConstraintRunnerTests.__allTests__ConstraintRunnerTests),
    ]
}
#endif
